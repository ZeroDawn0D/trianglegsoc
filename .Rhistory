print(paste("Enter (x,y) coordinates for point", i,":", sep = " "));
points[,1] <- c(0,0)
}
points <- data.frame(
p1 <- c(0,0),
p2 <- c(0,0),
p3 <- c(0,0),
p4 <- c(0,0),
p5 <- c(0,0)
)
print(point)
print(points)
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
print(points)
for( i in 1:5){
print(paste("Enter (x,y) coordinates for point", i,":", sep = " "));
points[,1] <- c(0,0)
}
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
print(points)
for( i in 1:5){
print(paste("Enter (x,y) coordinates for point", i,":", sep = " "));
points[,1] <- scan(n=2)
}
print(points)
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
print(points)
for( i in 1:5){
print(paste("Enter (x,y) coordinates for point", i,":", sep = " "));
points[,i] <- scan(n=2)
}
print(points)
points <- matrix(points)
print(points)
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
points <- matrix(points)
print(points)
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
points <- data.matrix(points)
print(points)
points <- data.frame(
p1 = c(0,0),
p2 = c(0,0),
p3 = c(0,0),
p4 = c(0,0),
p5 = c(0,0)
)
print(points)
points <- data.matrix(points)
print(points)
install.packages("pkgdown")
getMatrixInput()
get_matrix_input <- dget("get_matrix_input.R");
get_matrix_input <- dget("get_matrix_input.R");
print(points)
getwd()
get_matrix_input <- dget("R/get_matrix_input.R");
print(points)
get_matrix_input <- dget("R/get_matrix_input.R");
points <- get_matrix_input();
print(points)
source("R/input.R")
points <- get_matrix_input();
print(points);
run_app <- function(){
source("R/input.R")
points <- get_matrix_input();
print(points);
}
run_app()
is.matrix(points)
(ax,ay) <- c(5,6)
c(ax,ay) <- c(5,6)
ax,ay <- c(5,6)
ax,ay <- 5,6
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
points <- get_matrix_input();
print(points);
plot_points(
points$p1,
points$p2,
points$p3,
points$p4,
points$p5)
}
plot_points <- function(A,B,C,D,E){
plot(A[1],B[1])
}
run_app()
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
points <- get_matrix_input();
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
}
run_app()
run_app()
run_app()
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
points
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
points <- get_matrix_input();
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
}
run_app()
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
points <- get_matrix_input();
points <- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
}
run_app()
plot_line <- function(A,B){
segments(
A[1],A[2],
B[1],B[2],
col = "red")
}
source("R/plotting.R")
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_line(
points[,1],
points[,2]
)
?circumcent
??circumcent
??geometry
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
source("R/geometry.R")
points <- get_matrix_input();
points <- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_line(
points[,1],
points[,2]
)
print(circumcenter(
points[,1],
points[,2],
points[,3]))
}
run_app()
?power
?^
+(3,4)
'+'(3,3)
'*'(6,6)
'|'(TRUE,FALSE)
distance <- function(A,B){
Ax <- A[1]
Ay <- A[2]
Bx <- B[1]
By <- B[2]
ans <- sqrt( (Ax-Bx)^2  - (Ay-By)^2 )
return(ans);
}
plot_triangle(
points[,1],
points[,2],
points[,3]
)
plot_triangle <- function(A,B,C){
plot_line(A,B)
plot_line(B,C)
plot_line(C,A)
}
plot_triangle(
points[,1],
points[,2],
points[,3]
)
plot_triangle <- function(A,B,C){
plot_line(A,B)
plot_line(B,C)
plot_line(A,C)
}
plot_triangle(
points[,1],
points[,2],
points[,3]
)
plot_triangle <- function(A,B,C){
plot_line(A,B)
plot_line(B,C)
}
plot_triangle(
points[,1],
points[,2],
points[,3]
)
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_triangle(
points[,1],
points[,2],
points[,3]
)
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
source("R/geometry.R")
points <- get_matrix_input();
points <- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_triangle(
points[,1],
points[,2],
points[,3]
)
print(circumcenter(
points[,1],
points[,2],
points[,3]))
}
run_app()
i <- 1
while(i <= 5){
j <- i+1
while(j <= 5){
k <- j+1
while(k <= 5){
ans <- paste(i,j,k)
print(ans)
k <- k+1
}
j<-j+1
}
i<-i+1
}
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
source("R/geometry.R")
points <<- get_matrix_input();
points <<- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_triangle(
points[,1],
points[,2],
points[,3]
)
i <- 1
while(i <= 5){
j <- i+1
while(j <= 5){
k <- j+1
while(k <= 5){
if(is_triangle_valid(i,j,k)){
plot_triangle(
points[,i],
points[,j],
points[,k]
)
}
k <- k+1
}
j<-j+1
}
i<-i+1
}
}
run_app
run_app
run_app()
View(is_triangle_valid)
distance <- function(A,B){
Ax <- A[1]
Ay <- A[2]
Bx <- B[1]
By <- B[2]
ans <- sqrt( (Ax-Bx)^2  - (Ay-By)^2 )
return(ans);
}
is_point_in_circle <- function(A,B,C,D){
P <- circumcenter(A,B,C)
circumradius <- distance(A,P)
dist_D <- distance(D,P)
if( dist_D < circumradius)
return(TRUE)
else
return(FALSE)
}
is_triangle_valid <- function(a,b,c){
valid <- TRUE;
for(i in 1:5){
if(i!=a && i!=b && i!=c){
if(is_point_in_circle(
points[,a],
points[,b],
points[,c],
points[,i]
)){
valid <- FALSE
break
}
}
}
return(valid)
}
is_triangle_valid(1,2,3)
is_triangle_valid(1,2,3)
distance <- function(A,B){
Ax <- A[1]
Ay <- A[2]
Bx <- B[1]
By <- B[2]
ans <- sqrt( (Ax-Bx)^2  + (Ay-By)^2 )
return(ans);
}
is_triangle_valid(1,2,3)
run_app()
run_app()
run_app <- function(){
source("R/input.R")
source("R/plotting.R")
source("R/geometry.R")
points <<- get_matrix_input();
#points <<- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_triangle(
points[,1],
points[,2],
points[,3]
)
i <- 1
while(i <= 5){
j <- i+1
while(j <= 5){
k <- j+1
while(k <= 5){
if(is_triangle_valid(i,j,k)){
plot_triangle(
points[,i],
points[,j],
points[,k]
)
}
k <- k+1
}
j<-j+1
}
i<-i+1
}
}
run_app()
run_app <- function(limit = Inf){
source("R/input.R")
source("R/plotting.R")
source("R/geometry.R")
points <<- get_matrix_input();
#points <<- points[,order(points[1,])]
print(points);
plot_points(
points[,1],
points[,2],
points[,3],
points[,4],
points[,5])
plot_triangle(
points[,1],
points[,2],
points[,3]
)
i <- 1
triangles <- 0
while(i <= 5){
j <- i+1
while(j <= 5){
k <- j+1
while(k <= 5){
if(is_triangle_valid(i,j,k) && triangles < limit){
plot_triangle(
points[,i],
points[,j],
points[,k]
)
triangles <- triangles + 1
}
k <- k+1
}
j<-j+1
}
i<-i+1
}
}
run_app(3)
pkgdown::build_site*()
pkgdown::build_site()
pkgdown::build_site()
browseVignettes("ggplot2")
trianglegsoc::run_DT()
run_DT()
getwd()
devtools::install()
trianglegsoc::run_DT()
devtools::install()
.Last.error.trace
devtools::install()
trianglegsoc::run_DT()
devtools::install()
devtools::install()
trianglegsoc::run_DT()
devtools::install()
trianglegsoc::run_DT()
devtools::install()
trianglegsoc::run_DT()
devtools::build()
devtools::install()
devtools::install()
rm(list = ls())
devtools::install()
devtools::install()
devtools::install()
